package edu.aitu.algos; public final class DeterministicSelect{ private static final int INSERTION_CUTOFF=16; private DeterministicSelect(){} public static int select(int[] a,int k){ if(a==null||a.length==0) throw new IllegalArgumentException("empty array"); if(k<0||k>=a.length) throw new IllegalArgumentException("k out of range"); int[] b=a.clone(); return select(b,0,b.length,k);} private static int select(int[] a,int l,int r,int k){ int n=r-l; if(n<=INSERTION_CUTOFF){ insertion(a,l,r); return a[l+k]; } int pivot=medianOfMedians(a,l,r); int[] rg=partition3(a,l,r,pivot); int lt=rg[0], eqEnd=rg[1]; int leftSize=lt-l, eqSize=eqEnd-lt; if(k<leftSize) return select(a,l,lt,k); if(k<leftSize+eqSize) return pivot; return select(a,eqEnd,r,k-leftSize-eqSize);} private static void insertion(int[] a,int l,int r){ for(int i=l+1;i<r;i++){ int x=a[i],j=i-1; while(j>=l&&a[j]>x){ a[j+1]=a[j]; j--; } a[j+1]=x; } } private static int medianOfMedians(int[] a,int l,int r){ int n=r-l; int groups=(n+4)/5; for(int i=0;i<groups;i++){ int s=l+i*5, e=Math.min(s+5,r); insertion(a,s,e); int med=s+(e-s-1)/2; int tmp=a[l+i]; a[l+i]=a[med]; a[med]=tmp; } return select(a,l,l+groups,groups/2);} private static int[] partition3(int[] a,int l,int r,int pivot){ int i=l,m=l,j=r-1; while(m<=j){ if(a[m]<pivot){ int t=a[i]; a[i]=a[m]; a[m]=t; i++; m++; } else if(a[m]>pivot){ int t=a[m]; a[m]=a[j]; a[j]=t; j--; } else { m++; } } return new int[]{i,m}; } }