package edu.aitu.algos; public final class MergeSort { private static final int INSERTION_CUTOFF=16; private MergeSort(){} public static void sort(int[] a){ if(a==null||a.length<2)return; int[] buf=new int[a.length]; sort(a,0,a.length,buf);} private static void sort(int[] a,int l,int r,int[] buf){ int n=r-l; if(n<=INSERTION_CUTOFF){ insertion(a,l,r); return;} int m=(l+r)>>>1; sort(a,l,m,buf); sort(a,m,r,buf); if(a[m-1]<=a[m]) return; merge(a,l,m,r,buf);} private static void merge(int[] a,int l,int m,int r,int[] buf){ int i=l,j=m,k=l; while(i<m&&j<r) buf[k++]=(a[i]<=a[j])?a[i++]:a[j++]; while(i<m) buf[k++]=a[i++]; while(j<r) buf[k++]=a[j++]; System.arraycopy(buf,l,a,l,r-l);} private static void insertion(int[] a,int l,int r){ for(int i=l+1;i<r;i++){ int x=a[i],j=i-1; while(j>=l&&a[j]>x){ a[j+1]=a[j]; j--; } a[j+1]=x; } } }